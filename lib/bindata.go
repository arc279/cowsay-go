// Code generated by go-bindata.
// sources:
// beavis.zen.cow
// blowfish.cow
// bong.cow
// bud-frogs.cow
// bunny.cow
// cheese.cow
// cower.cow
// daemon.cow
// default.cow
// dragon-and-cow.cow
// dragon.cow
// elephant-in-snake.cow
// elephant.cow
// eyes.cow
// flaming-sheep.cow
// ghostbusters.cow
// head-in.cow
// hellokitty.cow
// kiss.cow
// kitty.cow
// koala.cow
// kosh.cow
// luke-koala.cow
// meow.cow
// milk.cow
// moofasa.cow
// moose.cow
// mutilated.cow
// ren.cow
// satanic.cow
// sheep.cow
// skeleton.cow
// small.cow
// sodomized.cow
// stegosaurus.cow
// stimpy.cow
// supermilker.cow
// surgery.cow
// telebears.cow
// three-eyes.cow
// turkey.cow
// turtle.cow
// tux.cow
// udder.cow
// vader-koala.cow
// vader.cow
// www.cow
// DO NOT EDIT!

package cowsay

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _beavisZenCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xd1\x31\xce\x83\x30\x0c\x05\xe0\x9d\x53\xbc\x8d\xff\x97\x70\xb2\x57\x8a\xd4\x43\x74\x8c\xf4\xba\x95\x8d\xa1\xed\x84\xf1\xd9\x2b\x42\xa1\x98\xd2\xaa\x6f\x01\xe9\x73\x64\x27\x06\xd0\xf7\xe1\xd4\x76\xf7\x4b\x7b\xbb\x0e\x03\xe6\x90\x52\x62\x26\x4d\x85\xfd\xb2\xa6\xc6\x2a\x53\xd9\x94\x08\x9f\x5c\x7d\x24\x1c\x16\xd3\x2d\x01\xf5\x37\xd4\xdf\xb0\x28\x45\xf6\x91\x8a\x24\xa1\xfc\x86\xf2\xd5\x15\x76\x1a\xbb\x79\x60\x06\x7f\x30\x02\xb6\xba\xe1\x8b\xfe\x48\x32\x1f\xff\xc7\x47\xa4\x6d\xda\x41\x99\x52\x32\xb3\x70\x76\xc2\x29\x41\xc4\xfc\x84\xf9\x29\x7c\x1f\x7d\x69\xbd\x0b\x64\x14\x8e\x6b\x84\x90\xde\xdc\x0e\x88\x5c\x3d\x02\x00\x00\xff\xff\x33\x79\xed\x45\x07\x02\x00\x00")

func beavisZenCowBytes() ([]byte, error) {
	return bindataRead(
		_beavisZenCow,
		"beavis.zen.cow",
	)
}

func beavisZenCow() (*asset, error) {
	bytes, err := beavisZenCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "beavis.zen.cow", size: 519, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _blowfishCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x51\xb1\x6a\x2c\x31\x0c\xec\xfd\x15\xd3\xf9\x96\x87\xa4\x1f\x38\x5e\xb9\xc5\xe6\xe0\x9a\x70\x10\x10\xc8\x5d\xae\x4b\x91\xa4\x3a\xdd\xbf\x07\xc9\xf6\xb2\x84\xb8\x58\xd6\x9a\x19\x8d\x34\x06\xf0\x78\xf0\xeb\xfd\xe3\xfb\xfd\xfe\xf5\xf9\x7c\x16\xfc\x59\x39\x1c\x8f\x0f\x1f\xab\x1c\xd5\x0b\x20\x3e\xab\x06\x86\x2b\xcc\xa1\x44\xff\xd8\xc4\x77\x85\xc0\x5d\x1d\x6f\xd8\x80\xa5\xdf\x03\x95\x0e\x6f\x80\x2f\xf5\xd4\x4d\xe2\x34\xac\x8d\x6b\xa2\x74\x76\x60\xdd\x5d\xcd\xba\x39\x9d\xcb\x98\x4b\xe6\x3c\x54\x19\x8d\x01\x21\xc6\xc5\xcc\x66\x6f\xed\xf8\x39\x3e\x1a\x0a\xc7\x55\x9d\xa9\x06\xc1\x12\x67\x4a\x50\x70\x4d\x38\x58\x6b\x01\x2a\xad\x31\x80\x31\x86\x36\x4c\x80\x46\x35\x0c\x0a\xcc\xb6\xd8\x1a\x18\x8c\xff\x81\x2e\x9c\x37\x8f\xfe\x8d\x9c\x6b\xac\x3b\x08\xfd\xa8\xc5\xa2\x61\x00\x49\x67\xfe\x15\x36\x8c\x63\x3d\xa9\x19\x5d\x76\x38\xe4\x1e\x13\x68\x8a\x2f\x83\xe3\x32\x65\x54\x49\x53\xb9\xed\x79\x19\x13\x51\xd5\xfe\x4a\x9e\xcb\x52\xc5\x2d\x82\x68\x8c\xd6\xcb\x12\xbf\xd4\xe7\x68\x6c\xcb\x7c\x52\x01\x13\x6b\xc1\xed\xa5\x27\x70\x9a\xde\x83\xa9\xa5\xfc\x04\x00\x00\xff\xff\xd2\xbb\xdc\xdd\x4c\x02\x00\x00")

func blowfishCowBytes() ([]byte, error) {
	return bindataRead(
		_blowfishCow,
		"blowfish.cow",
	)
}

func blowfishCow() (*asset, error) {
	bytes, err := blowfishCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "blowfish.cow", size: 588, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bongCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x80\x81\xea\x6a\xbd\x90\x8c\xfc\xd2\xf4\x8c\x92\xe2\xda\x5a\x2e\x05\x82\xe2\x0a\x0a\x71\xf1\xf1\x71\x0a\x60\x91\x78\x08\xd0\xd7\xa8\xae\xd6\x73\xad\x4c\x2d\xae\xad\xd5\xe4\xd2\x8f\xd1\xd7\x80\x2a\xd4\xd7\x88\x8f\xd7\x04\x29\xac\x51\x08\xd7\xd5\xd5\xd5\xad\xa9\x51\xa8\xa9\xab\x01\x0b\xd4\x80\x15\x40\x04\x14\x14\xea\xea\x50\x2c\x80\x0a\xa2\x89\xc5\xd7\x28\xe4\xa3\x09\x29\xd7\xe8\xa3\x88\xc4\x6b\x2b\x6b\xc7\x73\x01\x02\x00\x00\xff\xff\x1d\x3b\xf8\xf8\xdb\x00\x00\x00")

func bongCowBytes() ([]byte, error) {
	return bindataRead(
		_bongCow,
		"bong.cow",
	)
}

func bongCow() (*asset, error) {
	bytes, err := bongCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bong.cow", size: 219, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _budFrogsCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xce\xa1\x12\xc3\x30\x0c\x03\x50\xde\xaf\x10\x8b\x0d\x1c\x7f\x41\xbe\xa1\x64\xd0\x77\x1a\x5b\x59\xc0\x36\xd4\x74\xdf\xbe\x4b\x77\xd7\x14\x74\x42\x89\xf4\x80\xd1\xb3\xae\xf9\xb6\xd4\xf7\x63\x79\x3d\xb7\x6d\xc2\xdf\xae\xa7\xce\x6a\x19\xd7\xc9\x26\x73\x1d\xd6\x49\x80\x71\x49\xbd\x4f\x8c\x81\x03\x08\x01\xda\xfe\x11\xfd\x88\x1e\x53\x03\xd4\x01\x3f\x5d\x11\x64\x8b\x1f\x16\x23\x69\x3a\xb0\x37\xf2\x6c\x13\x90\xcc\x52\x7f\x96\x72\xb7\x54\xca\xb1\xec\x75\x9a\xbe\x01\x00\x00\xff\xff\x23\xa9\xa1\x8f\x05\x01\x00\x00")

func budFrogsCowBytes() ([]byte, error) {
	return bindataRead(
		_budFrogsCow,
		"bud-frogs.cow",
	)
}

func budFrogsCow() (*asset, error) {
	bytes, err := budFrogsCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bud-frogs.cow", size: 261, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bunnyCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x50\xa8\xae\xd6\x0b\xc9\xc8\x2f\x4d\xcf\x28\x29\xae\xad\xe5\x52\x40\x13\x50\x50\x50\x88\x01\x09\x82\x41\x8c\x82\x3e\x82\xa3\xa1\xa0\x09\x65\xeb\x69\x28\xe4\x2b\x68\xea\x71\x01\x02\x00\x00\xff\xff\x6c\x1c\xee\xf7\x4c\x00\x00\x00")

func bunnyCowBytes() ([]byte, error) {
	return bindataRead(
		_bunnyCow,
		"bunny.cow",
	)
}

func bunnyCow() (*asset, error) {
	bytes, err := bunnyCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bunny.cow", size: 76, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cheeseCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8f\x31\x0e\xc2\x30\x0c\x45\x77\x9f\xe2\x4b\xde\x22\xc1\xe7\x00\x1c\x83\xd1\x52\x46\xba\x31\x00\x53\xdd\xbb\xa3\x38\x09\x29\xa5\xf0\x86\x7c\xe9\x3f\x39\x96\x01\xcc\xf3\xf1\x32\xdd\x9e\xd7\xe9\x71\x5f\x16\xc1\x6e\x03\xe4\x42\xcf\x42\xed\x19\xaf\xe5\x9a\x05\x0f\xe1\xd8\xe2\xff\x45\xf4\xaa\x6a\x00\x55\x35\x9a\x21\x70\x02\x8c\x11\x5d\x70\xe7\xa7\x22\x38\x56\x9c\xdf\xc2\x60\xe2\x3f\x46\xe0\xe2\x6d\xc6\xda\x6d\xac\x7b\xd7\xea\x73\x88\xa0\xd0\xbf\x0d\xbd\x5e\x73\xd8\xe0\xb2\x5e\x38\x8e\x0b\x52\x4a\x2d\x7a\xc5\x9c\xb3\xb5\x90\x57\x00\x00\x00\xff\xff\x28\xa6\x2a\x05\xa3\x01\x00\x00")

func cheeseCowBytes() ([]byte, error) {
	return bindataRead(
		_cheeseCow,
		"cheese.cow",
	)
}

func cheeseCow() (*asset, error) {
	bytes, err := cheeseCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cheese.cow", size: 419, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cowerCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x00\x81\xea\x6a\xbd\x90\x8c\xfc\xd2\xf4\x8c\x92\xe2\xda\x5a\x2e\x05\x9c\x62\x0a\x0a\x3a\xf1\xf1\x3a\x0a\x35\x20\x56\x8d\x02\x5c\x50\x23\x3f\x5f\x33\x06\x22\x18\x1f\x1f\x8f\x10\x8e\x8f\x87\x09\x2b\x28\x28\x68\xc6\x20\x64\x14\x60\x82\x0a\x35\xf1\xe5\x20\x46\x0c\x36\x29\x05\x85\x1a\x10\x43\x8b\x0b\x55\xd2\x39\xbf\x3c\xb5\x48\x4f\x4f\x4f\x8f\x0b\x10\x00\x00\xff\xff\x9f\x1b\x67\x58\xbc\x00\x00\x00")

func cowerCowBytes() ([]byte, error) {
	return bindataRead(
		_cowerCow,
		"cower.cow",
	)
}

func cowerCow() (*asset, error) {
	bytes, err := cowerCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cower.cow", size: 188, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _daemonCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x50\x31\x6e\x04\x21\x0c\xec\xf7\x15\xd3\x81\x25\x8c\x3f\x70\xbc\x61\x9b\x94\x28\xa6\xcb\x75\x29\x92\x54\xbb\xf7\xf7\xc8\xde\x05\x81\x94\x4c\x65\x7b\x86\x19\x1b\x00\xc7\x91\xdf\x9e\x9f\x3f\x1f\xcf\xef\xaf\xd7\x0b\x1d\x69\x14\x1b\xfe\x11\x49\xec\x1a\x6a\x2e\xfa\x4b\x55\x51\x55\xd5\xd4\x38\x37\x4c\x10\x86\x02\x8d\x05\x08\x33\x11\xa5\x8a\xbd\x32\x49\x9d\x09\x81\x00\x38\xd1\xdc\x76\x66\x76\xec\xb6\x84\xf3\x6b\x4a\xe3\x77\xe6\xd0\x1e\xde\xcc\x31\x51\x33\xc1\x16\x20\x73\x5e\x9e\x64\x55\x15\x0f\x59\xe6\x66\x66\x08\x90\xed\x61\x45\xf6\xa1\x2a\x04\x7e\x60\xbd\xc6\x67\x29\xa5\xec\x44\x54\x0a\xa1\x12\xc4\xfa\x8b\x0a\xb7\x4b\xf0\x90\x14\xd6\x2b\xec\xb6\x5e\xac\x73\xff\x8c\x75\x21\x75\x44\x44\xb5\x8f\xa9\x57\x7b\xb3\x29\x00\x89\x7b\xe0\x30\xed\x61\x8d\xf9\xd0\x01\x1a\xb4\x6c\xbf\x01\x00\x00\xff\xff\x87\xc2\xdc\xea\x0d\x02\x00\x00")

func daemonCowBytes() ([]byte, error) {
	return bindataRead(
		_daemonCow,
		"daemon.cow",
	)
}

func daemonCow() (*asset, error) {
	bytes, err := daemonCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "daemon.cow", size: 525, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defaultCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x80\x82\xea\x6a\xbd\x90\x8c\xfc\xd2\xf4\x8c\x92\xe2\xda\x5a\x05\x05\x85\xb8\xf8\xf8\x38\x2e\x05\x1c\xb2\x1a\xd5\xd5\x7a\xae\x95\xa9\xc5\xb5\xb5\x9a\x31\xf1\x10\x80\x50\xab\xa0\xa0\xa0\x11\x1f\xaf\x19\x03\x65\x6b\xc6\xe8\xc7\xa0\x48\x82\x0d\xcb\xcf\x4b\x2f\x4d\xad\xad\x55\xa8\xa9\xd1\xd5\xd5\xd5\x2d\x57\xa8\x41\x55\xa2\xa0\xa0\x50\x53\x03\xa5\xb8\x00\x01\x00\x00\xff\xff\xc5\xca\xfd\xf4\xa3\x00\x00\x00")

func defaultCowBytes() ([]byte, error) {
	return bindataRead(
		_defaultCow,
		"default.cow",
	)
}

func defaultCow() (*asset, error) {
	bytes, err := defaultCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.cow", size: 163, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dragonAndCowCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xd3\x31\x6f\xab\x40\x0c\x07\xf0\x3d\x9f\xe2\xff\xb6\x04\xc5\x36\xfb\x7b\x43\xde\xd0\x39\x4b\x47\x2b\x46\xaa\xaa\x46\xea\xd0\x21\xed\x50\x71\xf0\xd9\x2b\xdf\x71\x17\x20\x40\x8d\x74\x45\x34\xfe\x61\xfb\x0e\x2c\x47\xdb\xf2\xf3\xf5\xe3\xeb\xed\xfa\x79\xeb\xba\xa5\x1f\x5c\x7c\x91\xcb\x6e\x25\xff\x37\x40\xa0\x80\x08\x74\x15\x78\x10\x82\x9a\x99\x84\x9c\x0f\xa8\x08\xc0\x1b\xc2\x9c\x90\x33\x70\x06\xd4\x2c\x01\x5e\x00\x02\xd4\x6b\x29\x51\x11\x11\x55\x1b\xe8\x90\xeb\xab\x8a\x15\x07\x01\xee\x8c\x28\xbf\x0d\x9b\x90\x9e\xcc\x4c\x4f\x4d\xbc\x17\xcb\x92\x53\x31\xfb\x8e\xa9\xe8\xd6\xac\x80\x5a\xea\x3c\x9b\x48\x25\x28\x4a\x89\xd1\x71\x5d\xab\x94\x33\x63\xca\x87\x9c\xa4\x44\x0d\x4c\xc6\xc2\x5a\x87\xd9\xa9\xc5\x82\xc5\x81\xed\x73\x73\x85\x1a\x14\xd3\xfc\x4c\x1e\xa9\xbb\x53\x4b\x23\x47\x83\xc1\x47\x7e\xc0\x5f\x10\x17\xca\x60\xca\xd4\x0f\x39\xfe\x96\x05\x6a\x1c\x47\x2a\x67\xd2\xd2\x9f\x8a\x38\x30\xf5\x09\x1d\x82\xa3\xd8\x4f\xa8\xa1\x7f\xb3\xdc\x0b\x1a\xd1\xfb\x7b\xa7\xe1\x9c\xa1\x54\x36\x2b\xca\xcf\xb3\xed\xdb\x96\x9f\xbe\x5f\x6f\x5d\x77\x18\xfd\xab\xf2\x32\x26\x9f\x4d\xbb\xd0\xc5\xcc\xdb\xc7\x85\x68\x04\xb1\x1f\xe6\x9e\xb8\x6c\xbe\x52\xf3\xc0\xf0\xb4\x43\x88\x98\xa9\xa6\xef\xe4\xff\xcb\xfb\x9f\xf8\x48\x22\xc5\xfc\x6f\x3a\x88\x1c\x06\x9a\x2a\x69\xaf\x55\xe7\x25\x8b\x10\xc7\x5d\xcc\x57\x7b\x01\x0d\x57\xbf\xfb\x09\x00\x00\xff\xff\xdd\x14\x41\x3b\x8e\x04\x00\x00")

func dragonAndCowCowBytes() ([]byte, error) {
	return bindataRead(
		_dragonAndCowCow,
		"dragon-and-cow.cow",
	)
}

func dragonAndCowCow() (*asset, error) {
	bytes, err := dragonAndCowCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dragon-and-cow.cow", size: 1166, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dragonCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x3d\x6e\xc3\x30\x0c\x85\x77\x9f\xe2\x6d\xb6\x81\x90\xcc\x5e\xa0\xc8\x21\x3a\x12\x66\xb6\x66\xeb\xd0\x76\x8a\xa2\xb3\x17\x14\x25\x45\x49\xdd\xa5\x34\xe0\x00\xce\xf7\x7e\x44\x1b\x65\xae\x57\x7e\xbb\x7c\x7c\xbf\x5f\xbe\x3e\x6f\x37\xec\x8c\x40\x01\x11\x9d\xf0\x87\x20\xa9\x99\x49\x6a\x34\xa0\x22\x80\x76\x41\x3c\x3f\x02\x47\x40\xcd\x82\x81\x33\x09\xea\xe6\xc0\xf4\x90\x57\xef\x2a\xd6\x49\x24\x38\xa9\x8f\xa8\x9e\x6c\x33\x3d\xcd\x11\x6a\x8d\x75\xb8\xf8\xea\xa3\xb1\xd8\x16\x8e\x05\x0e\xb4\xb0\x51\xe2\x5e\x78\x81\xc8\x8a\xd4\x63\xa4\xb2\xf5\x91\x62\xc4\x17\x08\x64\x85\x25\x2b\xd5\xd7\x56\xa2\xe3\x95\xb7\x10\xb8\xb7\xf3\xb3\x1c\x0c\x06\x2f\xb4\xe0\x05\xc4\x5d\x60\x30\x65\xca\x2d\x9d\x29\xe7\xbc\x11\x4f\xc0\x52\xb2\xb0\xae\x38\xd0\xb5\xfd\x6f\xf1\x73\x26\x4e\x4c\x39\x7c\x9a\xb4\x9b\xe0\xcc\x53\x91\x57\x3d\x66\xd1\x71\xdd\xe3\xb8\x87\xa1\x37\x60\xf2\xf4\x72\xde\x62\x10\xfa\xf0\xf4\xcf\x61\x94\xee\x7d\x40\xd2\x97\xa0\xed\x08\xd5\x80\x89\xc8\x1b\x6b\x5f\x34\xcd\xbf\xe4\xc3\x19\xb4\x44\x6a\xec\x62\x4c\x10\x29\x56\xcc\xaf\x03\x3a\x8c\xe1\xbe\xce\xde\x7c\xa3\xb3\xdf\x6c\x7a\xee\x2b\x42\x5c\x5e\x4d\xbb\x6e\x1b\xa8\x5e\x79\xe7\x80\xbe\x31\xc2\x81\x29\x3f\x5b\xfd\x63\xc4\x6d\x7e\x02\x00\x00\xff\xff\x68\x39\x4b\x25\x9a\x03\x00\x00")

func dragonCowBytes() ([]byte, error) {
	return bindataRead(
		_dragonCow,
		"dragon.cow",
	)
}

func dragonCow() (*asset, error) {
	bytes, err := dragonCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dragon.cow", size: 922, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _elephantInSnakeCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x50\x50\xa8\xae\xd6\x0b\xc9\xc8\x2f\x4d\xcf\x28\x29\xae\xad\xe5\x52\x40\x17\x51\x40\x01\x7a\x7a\x7a\x7a\x50\x26\x17\x9a\x30\x4c\x4a\x0f\x43\x5a\x0f\xc5\x04\x74\x69\x3d\x05\x6c\xd2\x7a\xc8\x46\x62\x58\x84\x90\xc6\x0a\xb8\xb8\x5c\x73\x52\x0b\x32\x12\xf3\x4a\x14\x32\xf3\x8a\x33\x53\x52\x15\x1c\x83\x9d\x3d\x3d\x15\x8a\xf3\x12\xb3\x53\xb9\x00\x01\x00\x00\xff\xff\xd5\x8d\xbf\xae\xf4\x00\x00\x00")

func elephantInSnakeCowBytes() ([]byte, error) {
	return bindataRead(
		_elephantInSnakeCow,
		"elephant-in-snake.cow",
	)
}

func elephantInSnakeCow() (*asset, error) {
	bytes, err := elephantInSnakeCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "elephant-in-snake.cow", size: 244, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _elephantCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8b\xa1\x0e\x43\x21\x0c\x45\x3d\x5f\x71\x24\x98\xf5\x53\x30\x93\x4d\x90\xc3\x2c\x88\x6d\x8a\xf2\xef\x4b\x61\x64\xc9\x7b\xe2\x55\x9c\xde\x9e\x9b\xd2\xfb\xed\x5e\xdb\xe7\x51\xdf\xaf\x31\xf0\x11\x85\x52\x8a\x87\xc0\xa9\x17\x41\x05\x1c\xea\x3d\x10\xa3\x33\x93\x7d\xa5\xb4\x24\xaa\xc8\x0a\x88\xfc\xdc\x7c\x35\x6c\x86\xed\xfc\xb4\x85\x4b\x47\xe3\xe8\x6c\xf3\xef\x9e\xb6\x19\xbe\x01\x00\x00\xff\xff\x24\x74\xe1\x51\xe0\x00\x00\x00")

func elephantCowBytes() ([]byte, error) {
	return bindataRead(
		_elephantCow,
		"elephant.cow",
	)
}

func elephantCow() (*asset, error) {
	bytes, err := elephantCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "elephant.cow", size: 224, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _eyesCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\x31\x0b\xc2\x30\x10\x85\xf7\xfc\x8a\x97\x6b\x41\xa8\x90\xc9\x29\x38\xf9\x03\x44\xc4\x92\x0c\xc5\x41\x0a\x76\xeb\xa0\x4e\xa5\xf9\xed\x12\xd2\xb3\xa7\x69\xbd\x1b\x7a\xef\xfa\xbe\xd7\x83\x02\xc0\x30\x98\x4b\xd7\xbf\xee\xdd\xf3\x31\x8e\x0a\x2b\xab\xff\x65\xac\xd5\xa9\xac\x51\x80\x99\xc6\x75\xbb\x16\xa5\x80\x10\x42\x48\x22\x67\x84\xb9\x76\xce\x35\x65\x6c\x4c\x57\xd9\x28\x8e\xce\x6b\x6d\x17\x10\x5f\xb3\x5f\xf6\x89\xe1\x79\x55\x14\xce\x73\x82\xd9\xa7\x4f\xf1\x3b\x92\xc6\xc9\x9e\x27\xf0\x5c\xfb\x78\x95\xe4\xa5\x07\xbb\x59\x55\x1c\x72\x4d\xfa\x20\xe2\x7e\xc2\xb3\x98\x36\x3e\xcf\x84\xcf\xbf\xa1\xaa\x29\x6f\xad\x70\x00\xd8\x54\xcb\x7c\xbf\x2d\x04\x99\x70\x22\xfa\x56\x71\xa1\xde\x01\x00\x00\xff\xff\xfa\x3c\xdb\xd5\x1f\x02\x00\x00")

func eyesCowBytes() ([]byte, error) {
	return bindataRead(
		_eyesCow,
		"eyes.cow",
	)
}

func eyesCow() (*asset, error) {
	bytes, err := eyesCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "eyes.cow", size: 543, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _flamingSheepCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcf\xbd\xaa\x84\x30\x14\x04\xe0\xde\xa7\x98\xe2\x42\xae\xa0\x73\xfb\xdc\x66\x1f\x62\x2d\x02\x82\x69\x64\x3d\xd5\x16\xee\x16\x8b\xc7\x3c\xfb\x62\x82\x7f\xc4\x39\xc3\x20\xf8\x35\x01\xa6\x89\xf7\xe1\xf9\x7e\x0c\xaf\x71\x9e\x71\x08\xb7\x89\x5b\xe0\xd2\x72\x69\x52\x1e\xa8\xe2\xc7\x42\x73\xcb\xff\xc5\x59\xd0\xc0\x22\x95\x89\x66\x56\x48\x6f\x21\x1e\x42\x61\x25\x80\x6c\x34\xb3\xbe\xaa\x6b\xaa\x40\x45\x25\xd5\xae\x34\xa6\xf9\x99\xfa\x4f\x3f\xce\x4d\x4b\xd3\xde\xf6\xf3\x54\x35\x27\xd9\x76\xdd\xdf\xef\x91\xac\x57\x1a\x9c\x60\x4c\x26\xcb\xed\xe9\xc7\x78\xe7\x42\x08\xc1\x39\x73\xf9\x1b\xaa\xfb\xa2\xf8\x06\x00\x00\xff\xff\xce\x67\x54\x02\x8f\x01\x00\x00")

func flamingSheepCowBytes() ([]byte, error) {
	return bindataRead(
		_flamingSheepCow,
		"flaming-sheep.cow",
	)
}

func flamingSheepCow() (*asset, error) {
	bytes, err := flamingSheepCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flaming-sheep.cow", size: 399, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ghostbustersCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\x3d\x6e\xc3\x30\x0c\x85\x77\x9f\x82\xf0\xd2\x78\x78\xe6\x09\x9a\x2b\x64\x69\x03\x0d\x04\x38\x36\x5b\x87\xfe\x2c\x81\xef\x5e\x50\xa2\x64\xd3\xb2\x81\x3e\x20\x81\x61\x7e\x0f\x8f\xa4\x2c\x6a\x7a\x3e\xe7\xb7\xc7\xe7\xcf\xc7\xe3\xfb\x6b\x59\x06\xfa\x47\x21\x56\xd6\xd7\xaa\x00\x54\x03\xda\x6a\xf0\x07\x36\xc4\xb4\xc7\xcc\x7d\x21\xce\xcf\x42\x53\x5a\x25\xbf\x73\x84\x67\xa4\x94\x2e\x44\x74\x2b\xbf\x2d\x6c\x42\xc0\xd9\x61\xd3\x7b\xfe\x9f\x6a\xa9\x06\x0c\x91\x5e\x79\xd7\x04\x68\xa3\x77\x8e\x62\x60\x72\xcb\xad\x25\x14\xd2\xa6\xd9\x5b\xdc\x41\x3e\x6d\x68\xc6\x78\x55\xf7\xec\x2c\x49\x95\x0f\xf8\x22\xc9\xeb\xc7\x75\xa0\x7c\x0a\xa5\xdf\x53\x83\x65\xb4\x09\x2c\x46\x40\x64\x3e\xce\x47\xa1\x2c\x5d\x40\xe9\x57\x2d\x86\x5f\x73\x67\x02\x21\xc7\x0f\x1a\xca\x7a\x01\xe0\x85\x3a\x8c\x40\x6c\x67\x72\xc8\xc7\xad\xae\xf3\x4b\x5b\x7d\xfe\x3c\x4e\x1d\xbc\x39\x4a\xd9\x06\x5c\x3b\x83\xf6\x8e\xea\xa9\x8b\xd8\xd2\xea\x83\x44\x9e\xd0\x3e\xba\xa8\xba\x0e\x74\xd7\x41\xd2\xa9\xf8\xe0\xee\x8c\xe3\xbd\x07\xef\xe3\x38\xfc\x05\x00\x00\xff\xff\xd5\xf7\xb7\x6c\xc3\x03\x00\x00")

func ghostbustersCowBytes() ([]byte, error) {
	return bindataRead(
		_ghostbustersCow,
		"ghostbusters.cow",
	)
}

func ghostbustersCow() (*asset, error) {
	bytes, err := ghostbustersCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ghostbusters.cow", size: 963, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _headInCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\x31\x0e\xc2\x40\x0c\x04\xfb\x7b\xc5\x94\xb9\xe2\x92\x17\x50\xf2\x03\xca\x53\x5c\x45\x49\x45\x8a\x10\x21\x74\xf6\xdf\x11\x38\x86\x26\xdb\xd8\xda\x9d\xd5\x02\xb4\xd6\xdf\x96\x75\x9f\x97\xc7\x66\x96\x38\xb7\x46\x91\x91\xd0\xf0\xb5\xba\xd6\xfa\xeb\x6b\xda\xcc\x72\x15\xd7\x00\x12\x72\x46\x24\xd7\xa3\x95\x2f\x9d\xc7\x2a\xd4\x1f\xf2\x99\x5a\xef\xf3\x3e\x99\x01\xaa\xa5\x94\xf2\x44\xa1\xe2\x45\x47\xd1\x14\xeb\xaa\xff\x73\xfc\x11\xa4\x77\x00\x00\x00\xff\xff\xdf\x5c\x9b\x39\xd0\x00\x00\x00")

func headInCowBytes() ([]byte, error) {
	return bindataRead(
		_headInCow,
		"head-in.cow",
	)
}

func headInCow() (*asset, error) {
	bytes, err := headInCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "head-in.cow", size: 208, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hellokittyCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x50\xa8\xae\xd6\x0b\xc9\xc8\x2f\x4d\xcf\x28\x29\xae\xad\xe5\x52\xc0\x22\xa0\xa0\xa0\xa0\x1f\x13\xaf\x99\x6f\x03\xe1\xd4\x40\x84\x62\x60\x3c\x7f\x05\x3d\x05\xff\x1a\xa8\xc2\x98\x78\x10\xd0\xe7\x02\x04\x00\x00\xff\xff\x3d\xbe\x39\x5f\x58\x00\x00\x00")

func hellokittyCowBytes() ([]byte, error) {
	return bindataRead(
		_hellokittyCow,
		"hellokitty.cow",
	)
}

func hellokittyCow() (*asset, error) {
	bytes, err := hellokittyCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hellokitty.cow", size: 88, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kissCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x91\xbd\x6e\x85\x30\x0c\x85\x77\x9e\xe2\x6c\x24\x52\x7e\xf6\xe6\x35\x3a\x5a\x4a\xb6\xb2\x75\x68\x3b\x61\xf2\xec\x95\x9d\x20\x12\x2e\xf7\x1b\x40\xf2\x87\xed\x93\x00\x61\xdf\xc3\xe7\xf6\xfd\xf7\xb5\xfd\xfe\x1c\xc7\x82\xb7\xb5\x8e\x4b\x0d\x37\x95\xd3\xc5\x24\xb4\xb2\x66\x21\xad\x37\x61\xa2\xb5\xd6\xb2\x31\x34\x8a\x9c\x92\x51\x58\xec\x60\x22\x38\xd3\x40\x53\xc1\xfb\x6a\x00\x42\xb5\x03\x4b\x6b\x10\x08\x28\xe4\xcd\x45\xef\xe4\xf6\x28\x04\xc0\x82\xe9\xdc\xc2\x7d\x67\xf7\x28\x01\x39\x02\xa4\x67\x88\xe0\x9e\x48\xb5\x43\xa1\x3a\x5e\x43\x3c\xf3\x72\x5f\x4d\x0f\x92\x65\xa6\xa4\xe2\x27\x07\x54\xaf\xf6\x65\xa6\x46\xa8\x21\xc7\x0a\x9f\x1d\x80\xe1\xe2\xd8\x0b\x7a\x0a\x6d\x5c\x53\x9a\xa2\xc8\xeb\x43\x7e\x45\x9b\x74\x6d\x8b\xc3\x27\xbd\xb8\x4c\x7d\x77\xf9\x1f\x00\x00\xff\xff\x24\xb7\xcd\x60\x34\x02\x00\x00")

func kissCowBytes() ([]byte, error) {
	return bindataRead(
		_kissCow,
		"kiss.cow",
	)
}

func kissCow() (*asset, error) {
	bytes, err := kissCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kiss.cow", size: 564, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kittyCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8e\x31\x6e\x84\x50\x0c\x44\x7b\x4e\xf1\x42\x63\x3e\xc2\x43\x93\x2e\xd7\x48\x93\xca\xee\x02\x12\x52\x8a\x24\x15\xe2\xee\x2b\xc3\xae\xb6\xda\x5f\xfd\xb1\xdf\xcc\x98\x7a\xfb\xae\xcf\xe5\xe7\xff\x7b\xf9\xfb\x3d\x8e\x8e\x97\x33\x86\x3e\xdd\xc0\x7c\xee\x1b\x8a\x08\xc9\xdd\x30\xfa\x74\xc5\x83\x82\x64\x0c\x46\x68\xa7\x70\x95\xf5\xda\x34\x54\x68\x88\x6c\x4f\x7e\x88\xaf\x50\xc3\x50\x70\xb9\x52\x91\x7c\x40\x26\x2e\xe4\x76\x87\x43\x22\xdd\xad\x9a\x63\x06\xe6\x3a\x20\x90\x31\xbd\x77\x67\xcf\xca\x46\x9b\xdc\xac\xc4\xc6\xda\xa6\xf3\x37\xf0\x56\x39\x15\xd2\xdd\x02\x00\x00\xff\xff\xfe\x84\x47\xae\xf6\x00\x00\x00")

func kittyCowBytes() ([]byte, error) {
	return bindataRead(
		_kittyCow,
		"kitty.cow",
	)
}

func kittyCow() (*asset, error) {
	bytes, err := kittyCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kitty.cow", size: 246, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _koalaCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x50\xa8\xae\xd6\x0b\xc9\xc8\x2f\x4d\xcf\x28\x29\xae\xad\xe5\x52\xc0\x22\x00\x02\xf1\xf1\xf1\x0a\x0a\x10\x4e\x75\x9d\x5e\xbc\x5e\x1d\x4c\x46\x43\x21\x52\x41\x13\xc2\xd6\xd0\xac\xd3\xaa\xd3\xd0\x54\x80\x29\xd4\x88\xd7\xd4\xd5\x88\x07\xf3\x01\x01\x00\x00\xff\xff\x2d\x92\x13\xd5\x67\x00\x00\x00")

func koalaCowBytes() ([]byte, error) {
	return bindataRead(
		_koalaCow,
		"koala.cow",
	)
}

func koalaCow() (*asset, error) {
	bytes, err := koalaCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "koala.cow", size: 103, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _koshCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8d\xb1\x11\x42\x21\x10\x44\x73\xaa\x78\x15\x78\x15\xfc\x2e\x0c\x99\xb9\xd0\x9f\x19\xa8\x11\x4b\xef\x0e\x27\xca\x77\x40\x2f\x58\x96\x7d\xb0\x07\x50\xca\xe9\xbc\x5f\x1f\x97\xfd\x7e\xab\x35\xf1\x23\x9a\x32\x77\x7f\x81\xe6\xba\x77\xf7\x84\x01\x39\xae\x16\xa2\xee\x72\x52\xa4\xfa\x90\x66\x7b\x36\x98\xb5\x36\xe3\xc0\x42\xc7\x03\x8d\x73\xfa\x2c\x4a\x45\x51\x3f\xb3\x56\x2c\x63\xc5\x40\xdb\x76\x5c\xf7\x66\x64\x1f\x63\x7c\xb3\xc5\xfc\x67\xcf\x00\x00\x00\xff\xff\xfe\xf1\x91\xbb\x6f\x01\x00\x00")

func koshCowBytes() ([]byte, error) {
	return bindataRead(
		_koshCow,
		"kosh.cow",
	)
}

func koshCow() (*asset, error) {
	bytes, err := koshCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kosh.cow", size: 367, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _lukeKoalaCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x50\xa8\xae\xd6\x0b\xc9\xc8\x2f\x4d\xcf\x28\x29\xae\xad\xe5\x52\x40\x13\x50\x80\x03\x3d\x2e\x28\x23\x3e\x3e\x5e\x41\x41\x41\x5f\x1f\xc2\xaf\xae\xd3\x8b\xd7\xab\xab\xd5\xd7\x57\x80\xca\x6b\x28\x44\x2a\x68\x7a\xeb\x2b\x40\xf9\x1a\x9a\x75\x5a\x75\x1a\x9a\x0a\x70\x7e\xbc\xa6\xae\x46\x3c\x82\xef\x53\x9a\x9d\xaa\x00\xe7\x05\x57\x96\x27\xe6\x64\xa7\x16\x41\x78\xd9\xf9\x89\x39\x89\x20\x39\x40\x00\x00\x00\xff\xff\x34\x27\x75\x2e\xa6\x00\x00\x00")

func lukeKoalaCowBytes() ([]byte, error) {
	return bindataRead(
		_lukeKoalaCow,
		"luke-koala.cow",
	)
}

func lukeKoalaCow() (*asset, error) {
	bytes, err := lukeKoalaCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "luke-koala.cow", size: 166, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _meowCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\x31\x6a\x83\x31\x0c\x85\xf7\x9c\xe2\x23\x8b\xff\x80\x65\x5d\xa1\x87\xe8\x52\x10\x3c\x6d\xcd\xd6\xa1\xed\x14\xe5\xee\x45\x4e\x49\xa1\x8b\xfc\x90\xbf\xef\x19\xc3\xed\xb6\x5e\xaf\x1f\xdf\xef\xd7\xaf\xcf\xfb\xfd\xc4\xbf\x05\x13\x10\x92\x96\xd9\x18\x23\x7b\xba\xdb\x34\x99\x69\x35\x0f\x44\x9e\x07\x49\x15\x11\x04\x11\x8e\xe3\x3d\xa6\x45\xe4\xd4\x83\xf3\x91\xf4\x75\x83\x6f\x50\x44\x3d\x41\xa3\x24\xd2\xe6\x46\x3d\x5e\xce\x01\x49\x90\x41\x35\x5b\xb5\xc9\x22\xbc\x4b\x48\x5b\x4a\x9b\x5a\xdb\x70\xd0\xb2\x45\x2e\x8b\x29\xc9\x03\x79\xc9\x15\x8a\x3e\xbb\x83\x87\xb4\x74\x39\xed\x38\x32\x7d\x9b\x45\x37\x47\x5b\xd2\xde\x74\x26\x7e\x7f\xb7\x59\x70\x8b\xcd\x5a\x57\x35\x18\x40\xd9\xa0\x9e\x1c\xec\x97\x9d\xb6\x1d\x69\xb6\xc8\x85\x39\x50\x8d\x3f\xee\x38\x0e\xc9\x7b\xae\x41\x67\xad\x65\xa3\xc3\x1c\xa7\x9f\x00\x00\x00\xff\xff\xf1\x30\xb8\xe9\x94\x01\x00\x00")

func meowCowBytes() ([]byte, error) {
	return bindataRead(
		_meowCow,
		"meow.cow",
	)
}

func meowCow() (*asset, error) {
	bytes, err := meowCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meow.cow", size: 404, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _milkCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8e\xb1\x12\xc2\x30\x0c\x43\x77\x7f\x85\x7e\x00\xf4\x03\x0d\xbf\xc0\xc2\xe8\x3b\x46\xba\x31\x00\x53\xdd\x7f\xe7\x6c\x53\xe2\x36\xba\x6b\xe3\x7b\x51\x24\x63\x59\xce\xb7\xf9\xf9\x79\xcc\xef\xd7\xba\xc2\x75\x2f\x82\x60\x74\x58\xbf\x37\x89\x27\x20\xba\xa8\x32\x32\x20\x29\x4b\xb8\xcf\xcc\x04\xeb\xd6\x1c\xff\xb8\x35\x05\x5b\x3b\x62\x5c\xf3\x33\x28\x14\x35\x64\xfa\x8d\x0a\x0d\xcc\x43\xb6\xc6\x26\x0c\x4b\xae\x11\x98\xa0\xf8\x6f\xef\x76\x20\x34\xd3\x1d\x76\xc0\xa8\x3c\x55\xb9\x47\xba\xcb\xb6\x63\x63\x93\x77\x21\x6a\x2f\xf2\x0d\x00\x00\xff\xff\x60\xb0\x24\x0a\x79\x01\x00\x00")

func milkCowBytes() ([]byte, error) {
	return bindataRead(
		_milkCow,
		"milk.cow",
	)
}

func milkCow() (*asset, error) {
	bytes, err := milkCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "milk.cow", size: 377, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _moofasaCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x80\x80\xea\x6a\xbd\x90\x8c\xfc\xd2\xf4\x8c\x92\xe2\xda\x5a\x90\x40\x7c\x7c\x7c\x3c\x97\x02\x76\x59\x7d\x90\x58\x0c\x5c\x56\x41\xa1\x46\x21\x2e\x3e\x3e\x4e\xa1\x06\x45\x48\xa3\xba\x5a\xcf\xb5\x32\xb5\xb8\xb6\x56\x53\xa1\x26\x3e\x1e\xc5\x40\xb0\x7c\x7c\xbc\xa6\x42\x0d\x84\xa7\x19\xa3\x8f\x6c\x9e\x42\x0c\x48\xb5\x7e\x8d\xae\xae\xae\x6e\x39\x8a\xb1\x50\xcd\x35\x50\x8a\x8b\x8b\x13\x2e\xe8\x9b\x9f\x9f\x96\x58\x9c\xc8\x05\x08\x00\x00\xff\xff\xa0\xca\xf7\xc5\xd2\x00\x00\x00")

func moofasaCowBytes() ([]byte, error) {
	return bindataRead(
		_moofasaCow,
		"moofasa.cow",
	)
}

func moofasaCow() (*asset, error) {
	bytes, err := moofasaCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "moofasa.cow", size: 210, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mooseCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8c\xb1\x0d\x02\x31\x0c\x45\xfb\x9b\xe2\x97\xa4\xf0\x65\x0a\x36\xa0\xb4\xe4\xea\x94\x54\xa4\x08\x11\x42\xb6\x77\x47\x04\x17\x84\x7b\x8d\x2d\xbf\x27\x03\xaa\xfb\xad\xb6\x51\xea\xa3\xbb\x6f\xf8\x3b\x00\x60\x61\x01\x00\xc9\x92\x3f\xfe\x14\xcc\x26\x5c\x70\x51\xdd\xaf\xaf\xa3\xbb\x27\x96\x2f\x8b\x16\x49\x1c\x7b\xe2\xcc\xbf\x6e\xbe\x6f\xf7\x32\x0e\x77\x98\x11\x11\x3d\x61\x4b\x01\xc0\x2c\xc6\xf6\x0e\x00\x00\xff\xff\xf0\x9b\xa1\xcd\xc2\x00\x00\x00")

func mooseCowBytes() ([]byte, error) {
	return bindataRead(
		_mooseCow,
		"moose.cow",
	)
}

func mooseCow() (*asset, error) {
	bytes, err := mooseCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "moose.cow", size: 194, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mutilatedCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x80\x80\xea\x6a\xbd\x90\x8c\xfc\xd2\xf4\x8c\x92\xe2\xda\x5a\x05\x05\x85\x98\x78\x08\xe0\x52\x28\x8b\x8f\x2f\xc3\x54\x10\xa3\xa0\xa0\xe0\xaf\xa0\xa0\xa0\xc9\xa5\xa0\x51\x5d\xad\xe7\x5a\x99\x5a\x5c\x5b\xab\x09\x31\xab\xa6\x46\x57\x57\x57\xb7\x5c\xa1\x86\x4b\x41\x23\x3e\x1e\x2e\x08\xa7\x62\xf4\x63\xb8\x20\x06\xe6\xe7\xa5\x97\xa6\xd6\xd6\x72\x01\x02\x00\x00\xff\xff\x9d\xf3\xcb\x74\x85\x00\x00\x00")

func mutilatedCowBytes() ([]byte, error) {
	return bindataRead(
		_mutilatedCow,
		"mutilated.cow",
	)
}

func mutilatedCow() (*asset, error) {
	bytes, err := mutilatedCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mutilated.cow", size: 133, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _renCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xce\x31\x0a\x02\x51\x0c\x84\xe1\x3e\xa7\xf8\xc1\xc6\x6d\x9c\xcb\x58\x06\xa6\x74\xbb\x57\xa8\xd5\x66\x3d\xbb\x6c\x9e\x82\x85\xdd\xc7\xcf\x10\x02\x6c\xdb\xe5\xba\x8e\xe7\x6d\x7d\xdc\xf7\x3d\xf8\x5b\x6c\x1b\x0e\xea\x84\x9c\x0e\x28\x28\x8d\x1c\x39\x9d\x69\x59\x81\x28\xd3\x25\x8e\x45\xa5\x79\xd5\xc7\x45\xea\xdb\x7b\x45\x90\x52\xaf\xfb\x7c\xd5\xaf\x0d\x39\x9d\x2e\x18\xd5\x56\xda\x56\x77\xf5\xa1\xb2\xfb\x35\xce\xb6\x17\x2f\xf1\x0e\x00\x00\xff\xff\xaa\x07\x65\xeb\xd5\x00\x00\x00")

func renCowBytes() ([]byte, error) {
	return bindataRead(
		_renCow,
		"ren.cow",
	)
}

func renCow() (*asset, error) {
	bytes, err := renCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ren.cow", size: 213, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _satanicCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x00\x81\xea\x6a\xbd\x90\x8c\xfc\xd2\xf4\x8c\x92\xe2\xda\x5a\x2e\x05\x4c\x31\x05\x05\x8d\xf8\x78\x4d\x05\x05\xa8\x9c\x82\x82\x82\x46\x8c\x3e\x84\xaf\xaf\x0b\x01\x31\xfa\x20\x61\x2e\x05\x7d\x85\x1a\x05\x33\x33\x33\x85\x9a\x1a\x30\x5f\x4b\x41\xa1\xa6\x06\x24\x0f\xe1\x43\x8c\xa8\xab\x53\x80\x93\x0a\x0a\x5c\x80\x00\x00\x00\xff\xff\x67\x8e\xe6\xd8\x84\x00\x00\x00")

func satanicCowBytes() ([]byte, error) {
	return bindataRead(
		_satanicCow,
		"satanic.cow",
	)
}

func satanicCow() (*asset, error) {
	bytes, err := satanicCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "satanic.cow", size: 132, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sheepCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x50\xa8\xae\xd6\x0b\xc9\xc8\x2f\x4d\xcf\x28\x29\xae\xad\xe5\x52\xc0\x22\x00\x02\xf1\xf1\x60\x0a\xca\x0d\x55\xa9\x4e\xad\x4c\x2d\xae\x0d\x8d\xd1\x53\x8f\x71\x40\xc0\x04\x3d\xa8\x82\x98\xf8\x78\x7d\x0d\x64\x19\x18\xd4\x84\x19\x08\x02\x18\x2a\x50\x64\x13\x22\x23\xeb\xea\xea\xea\x22\x23\xd5\x91\x45\x15\x6a\x6a\x20\x24\x17\x20\x00\x00\xff\xff\x89\x14\xe4\x70\xbb\x00\x00\x00")

func sheepCowBytes() ([]byte, error) {
	return bindataRead(
		_sheepCow,
		"sheep.cow",
	)
}

func sheepCow() (*asset, error) {
	bytes, err := sheepCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sheep.cow", size: 187, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _skeletonCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\xca\xc1\x0a\x82\x40\x14\x85\xe1\xbd\x4f\x71\xa8\xc5\xa8\x81\xf7\x29\x5a\x9c\x75\xed\x12\x46\x08\xc9\x45\x34\x0b\x8d\x88\x99\xeb\xb3\x47\x68\x89\x74\xe9\x5f\x1d\x0e\x1f\xbe\xc5\x58\x1d\xbb\x70\xbf\x74\x43\xaf\x3a\x5d\xb9\xf7\xc5\xb4\x32\xfc\x83\x12\x63\xb5\x7f\xb6\xbd\x6a\x5a\xd3\x1f\x9b\xfb\x8d\x2f\xca\xdd\xa7\x72\x85\xe7\x44\xb8\xad\xe7\x58\x5b\x82\x27\x26\xa6\x77\x04\xd1\x98\xa4\xa1\x13\x11\xe7\x40\xd0\x04\xe0\xb2\x2c\x30\x62\x5c\x96\x05\x80\xc3\x39\x3c\xae\xed\x10\x6e\xd9\x2b\x00\x00\xff\xff\x18\xea\x61\xdd\x47\x01\x00\x00")

func skeletonCowBytes() ([]byte, error) {
	return bindataRead(
		_skeletonCow,
		"skeleton.cow",
	)
}

func skeletonCow() (*asset, error) {
	bytes, err := skeletonCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "skeleton.cow", size: 327, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _smallCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\x73\xad\x4c\x2d\xae\xad\x55\xb0\x55\x50\xd2\xd3\x53\x52\x28\xcd\xcb\x49\x2d\x2e\x56\xd0\x80\x4b\x68\x5a\x73\x29\x40\x40\x75\xb5\x5e\x48\x46\x7e\x69\x7a\x46\x09\x48\xbd\x82\x82\x4e\x7c\xbc\x0e\x4c\x0e\x5d\x12\x49\x7f\x7c\x7c\x7c\x3c\x5c\x99\x82\x82\x82\x46\x7c\xbc\x26\x88\xd6\x8c\x41\x16\x05\x1b\x90\x9f\x97\x5e\x9a\x5a\x5b\x5b\x53\xa3\xab\x5b\x53\xa3\xa0\xc5\x05\x08\x00\x00\xff\xff\xb5\x32\xc7\xaf\x9e\x00\x00\x00")

func smallCowBytes() ([]byte, error) {
	return bindataRead(
		_smallCow,
		"small.cow",
	)
}

func smallCow() (*asset, error) {
	bytes, err := smallCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "small.cow", size: 158, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sodomizedCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x00\x83\xea\x6a\xbd\x90\x8c\xfc\xd2\xf4\x8c\x92\xe2\xda\x5a\x05\x34\x10\xcf\xa5\x40\x50\x95\x46\xbc\x26\x4c\x15\x86\xb2\xb8\xf8\xf8\x38\xa8\x94\xbe\x42\x0c\x5c\x19\xba\x3a\x8d\xea\x6a\x3d\xd7\xca\xd4\xe2\xda\x5a\xcd\x98\x78\x10\xd0\x8f\x8f\x41\x56\x0e\xb6\x25\x5e\x33\x06\xca\xd6\x54\xd0\x47\x91\x03\x1b\x97\x9f\x97\x5e\x9a\x5a\x5b\xab\x50\x53\xa3\xab\xab\xab\x5b\xae\xa0\xa1\xc1\x85\xee\x9b\x9a\x1a\x28\x65\x67\xa7\xc0\x05\x08\x00\x00\xff\xff\x60\x17\xf9\x3d\xfe\x00\x00\x00")

func sodomizedCowBytes() ([]byte, error) {
	return bindataRead(
		_sodomizedCow,
		"sodomized.cow",
	)
}

func sodomizedCow() (*asset, error) {
	bytes, err := sodomizedCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sodomized.cow", size: 254, mode: os.FileMode(420), modTime: time.Unix(1486459606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stegosaurusCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x3d\x52\x03\x31\x0c\x85\x7b\x9f\xe2\x0d\x4d\x28\x22\xe9\x02\x4c\xae\x40\x43\xe9\x41\xee\x48\x47\x01\x54\xb1\x75\x76\x46\xfe\xc9\xac\x37\xbb\x2c\xce\xce\xda\xb2\xfd\x3d\x3d\x29\x7b\xbb\xf1\xdb\xf5\xf3\xe7\xe3\xfa\xfd\x55\x0a\xfe\x1a\x3c\xe6\x80\xff\x42\x82\xe4\x14\x9f\xf0\x84\x80\x23\x8c\x89\x88\x81\x17\x5f\x5f\xc6\xd4\x76\x03\x8e\xe8\xec\xaf\xe8\x0f\xc1\x60\x20\x88\xe7\xf7\x93\x70\xbf\xa4\x3e\x16\x09\x99\x6c\x12\x31\xf2\xad\x30\x69\xd6\x77\x34\xb3\xc8\xa7\xad\x1a\x13\x8b\x99\xc9\x80\x68\x0c\xa7\x54\x65\xaf\x35\x7e\xd6\x19\xd7\x7d\xed\xf6\xd1\x4d\x4f\x4d\xec\x04\x5a\x17\x01\x3c\xd7\x42\xce\x2d\xbd\x3e\xf8\xca\xf7\x55\x01\xe2\xd2\x5e\xa2\xd6\xe3\xb5\x76\x99\x39\x59\x39\x1c\x30\xcf\xfa\xb2\x19\x26\xc6\xd9\x2c\x87\x75\xc5\x46\xac\xda\xef\x8a\xd6\xbf\xe9\x7d\x84\x04\x1d\x30\x93\x97\xf3\x40\x2f\x32\xc9\x56\x68\xdd\x9c\x9b\x54\xd4\x67\x47\xa3\xf6\x2e\xef\x84\xf5\xcb\x71\x85\xfe\xbb\x84\xdf\x00\x00\x00\xff\xff\x76\xb2\xbe\xfe\x21\x03\x00\x00")

func stegosaurusCowBytes() ([]byte, error) {
	return bindataRead(
		_stegosaurusCow,
		"stegosaurus.cow",
	)
}

func stegosaurusCow() (*asset, error) {
	bytes, err := stegosaurusCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stegosaurus.cow", size: 801, mode: os.FileMode(420), modTime: time.Unix(1486459607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stimpyCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8e\x31\xae\xc2\x40\x10\x43\xfb\x9c\xc2\x65\x7e\x13\x1f\x25\xcd\x2f\x47\x72\x49\x3a\x0a\xa0\x8a\x73\x77\x64\x98\x8d\x28\x90\xb0\x56\xbb\x3b\x4f\xd6\xd8\xc0\xbe\x2f\xff\xdb\xf5\x71\xd9\xee\xb7\xe3\x40\xb4\xe4\x52\xbf\x13\xbe\x58\x5c\x32\x25\x7a\x38\x22\x82\x28\xa2\x90\xd3\x90\x92\x57\x7b\xb5\x84\x6a\x68\x0a\x25\x96\x08\x15\x3c\xbc\x86\x31\x4b\xd2\x5f\xbe\x27\x2e\x96\x14\xb7\x08\x90\x4d\xe7\x4c\x2d\xbb\xc3\x8c\x1f\xac\x3e\xda\xd6\xc0\x64\x76\x0d\x8c\xa4\x25\x90\x83\x48\x69\x23\x9d\x2b\x5f\x25\xdf\x4d\xa7\x67\x00\x00\x00\xff\xff\xc2\x35\x80\x2d\x3f\x01\x00\x00")

func stimpyCowBytes() ([]byte, error) {
	return bindataRead(
		_stimpyCow,
		"stimpy.cow",
	)
}

func stimpyCow() (*asset, error) {
	bytes, err := stimpyCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stimpy.cow", size: 319, mode: os.FileMode(420), modTime: time.Unix(1486459607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _supermilkerCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x50\xa8\xae\xd6\x0b\xc9\xc8\x2f\x4d\xcf\x28\x29\xae\xad\x55\x50\x50\x88\x8b\x8f\x8f\xe3\x52\xc0\x10\xd7\xa8\xae\xd6\x73\xad\x4c\x2d\xae\xad\xd5\x8c\x89\x87\x00\x05\x28\x80\x72\xe3\xb9\x20\x5c\x8d\xf8\x78\xcd\x18\xa8\x94\x66\x8c\x3e\x98\x59\x13\x5c\x5a\x90\x5a\xa4\x50\x03\x55\x02\x36\x3c\x3f\x2f\xbd\x34\xb5\xb6\x56\xa1\xa6\x46\x57\x57\x57\x37\x5c\xa1\x06\x2a\x57\xe3\x9b\x99\x93\x9d\x5a\x04\x57\x0b\x12\x02\xcb\x85\xba\xc0\x40\x0d\xc4\xc2\x1a\x2e\x40\x00\x00\x00\xff\xff\xb5\x3e\x91\xaa\xbf\x00\x00\x00")

func supermilkerCowBytes() ([]byte, error) {
	return bindataRead(
		_supermilkerCow,
		"supermilker.cow",
	)
}

func supermilkerCow() (*asset, error) {
	bytes, err := supermilkerCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "supermilker.cow", size: 191, mode: os.FileMode(420), modTime: time.Unix(1486459607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _surgeryCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xc1\x4a\xc3\x40\x10\x86\xef\x79\x8a\xb9\x35\x2b\x74\xe6\x09\x04\x45\x7a\xf0\x62\x44\x0a\x1e\x3a\xf8\x7b\x11\x7b\xeb\xa1\x7a\x90\x4c\xde\x5d\x66\xb3\x76\x5d\xba\xdb\xf4\x23\x24\x64\xe7\xff\x66\x77\x42\xe8\xc4\x38\xf2\x76\x7f\xf8\xfe\xdc\x7f\x1d\xa7\x29\x2f\x93\x12\x09\x75\x74\x45\x50\xa8\xc8\x39\x3d\x10\xfc\x29\x7a\x5a\x3a\x8b\x8c\x23\x6f\x7e\x3e\x8e\xd3\xe4\xc9\x21\x5e\xf5\x24\x54\xe0\xbd\xa4\xd2\xeb\x26\xb6\xf2\x5b\xc8\x81\xae\x98\xa2\xd7\x78\x88\x5a\x95\xb4\x27\x9a\xcb\x81\x2e\x52\x9c\xc9\xf7\x8b\x56\x28\x47\xac\x59\x00\x76\x8a\x88\xbc\xcd\x28\x20\x81\x0e\xeb\x00\x34\x2c\x53\x60\x77\x3b\x93\x5c\x41\x22\x00\xd5\x1d\x3b\x52\x43\x49\x96\x1c\x6b\xcf\x65\x96\x8a\x66\x24\x92\x5e\xcc\xec\xbc\x7a\xc7\xb9\xba\xf0\xad\xfe\x02\xfe\x7f\xb0\x4a\xb9\xd8\xb4\xfe\xc1\xc4\xad\x70\xdb\x5a\xf1\x8a\xdf\x17\xad\x42\x7b\x18\x5e\xd7\xc3\xf3\xe6\xe5\x7e\xfb\x38\x3c\x5d\xb2\x7e\x03\x00\x00\xff\xff\xa8\x09\x57\xc3\x35\x03\x00\x00")

func surgeryCowBytes() ([]byte, error) {
	return bindataRead(
		_surgeryCow,
		"surgery.cow",
	)
}

func surgeryCow() (*asset, error) {
	bytes, err := surgeryCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "surgery.cow", size: 821, mode: os.FileMode(420), modTime: time.Unix(1486459607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _telebearsCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8f\x31\x0e\xc2\x30\x0c\x45\xf7\x9c\xe2\x8f\xc9\xe0\xe6\x02\xa8\x12\x48\xbd\x00\x74\x8c\xea\x29\x6a\x07\x44\x86\x12\xa1\x2a\xf1\xdd\x11\x51\x40\x10\x86\xbe\xc5\xc3\x7f\xdf\x96\x51\x48\xa9\x1b\x97\x10\xe7\xe5\xbe\x8a\xa0\x81\x15\x76\x2d\xcd\x06\xc0\x81\x08\xa3\xbf\xfa\xd3\x70\x3c\x5f\xde\xad\xbf\xda\xc4\x3c\xd5\xc8\xc2\x7d\xb4\xd6\xd3\x29\x75\xc3\xe6\x57\x11\xe3\xf8\x85\x65\xf7\xad\x97\xab\x6c\x1c\xb0\x85\x08\x18\xd8\x9f\xac\xac\x0b\xb7\x39\x7a\x11\xe4\x4c\x44\xf4\x80\xd6\xaa\xfd\x2e\xe7\x3a\xfa\x1e\xea\x19\x00\x00\xff\xff\x6d\x84\x38\x81\x0e\x01\x00\x00")

func telebearsCowBytes() ([]byte, error) {
	return bindataRead(
		_telebearsCow,
		"telebears.cow",
	)
}

func telebearsCow() (*asset, error) {
	bytes, err := telebearsCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "telebears.cow", size: 270, mode: os.FileMode(420), modTime: time.Unix(1486459607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _threeEyesCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x49\xad\x28\x29\x4a\x54\xb0\x55\x48\xce\xc8\x2f\xd0\xa8\xae\xd6\x73\xad\x4c\x2d\xae\xad\xd5\xb4\xe6\x82\xb3\x15\xf4\x6c\x15\x34\xa0\xea\x2a\x14\x8c\x34\xad\xb9\x14\xa0\xa0\xba\x5a\x2f\x24\x23\xbf\x34\x3d\xa3\x04\xa4\x4c\x21\x2e\x3e\x3e\x3e\x0e\x2e\x89\x26\x8b\x64\x76\x4c\x3c\x04\x20\x94\x2a\x28\x68\xc4\xc7\xc7\x6b\xc6\x40\x39\x9a\x31\xfa\x31\xc8\x92\x60\xa3\xf2\xf3\xd2\x4b\x53\x41\xd6\xd4\xd4\xe8\xea\xea\xea\x96\x2b\xd4\xa0\x28\x01\x81\x9a\x1a\x28\xc5\x05\x08\x00\x00\xff\xff\x0c\xfc\x87\xc8\xd7\x00\x00\x00")

func threeEyesCowBytes() ([]byte, error) {
	return bindataRead(
		_threeEyesCow,
		"three-eyes.cow",
	)
}

func threeEyesCow() (*asset, error) {
	bytes, err := threeEyesCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "three-eyes.cow", size: 215, mode: os.FileMode(420), modTime: time.Unix(1486459607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _turkeyCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\xbf\x4e\xc4\x30\x0c\xc6\xf7\x3e\x85\xc7\x38\x6e\xc8\x0e\x27\xc4\x43\xc0\x66\xf9\xdb\xe0\x36\x06\xe8\x54\xdd\xbb\xa3\xfc\x25\x8d\x2a\xb8\x14\x25\xc5\xc9\xcf\xdf\x67\xf7\x42\xb4\xef\x0f\xaf\xd7\xcf\xed\xe3\xfa\xfd\x75\xbb\xd1\xbf\x63\x15\x6f\xe6\x05\x80\x88\x60\xa1\xfb\x13\xac\xde\xcc\xec\x18\xe3\x94\xe0\xae\x0c\x10\x7f\x1a\x37\xef\x8b\x8d\x3b\xd2\x48\x53\x07\x41\xc4\x4b\x2e\x61\x9d\xcc\x8c\x92\xb9\xd2\xf4\xea\x7a\xed\x34\x54\xa0\x65\xf3\x84\xdd\x5b\xb8\xa2\x6b\x99\x21\x21\x48\x08\x55\xd2\xb8\xae\xba\x1c\x59\xa7\x2f\x79\xeb\x46\xef\x95\x5d\x25\x18\x01\x1e\x1e\x44\x66\x8a\x8c\x9d\x69\xef\x8f\x4f\x21\x66\xcb\x10\x1f\x24\xb5\xdc\xc4\x8b\xbf\xe4\x9a\xc1\xa8\xb6\xea\x44\x14\x07\xda\x51\xac\x86\x5d\x0b\xad\x00\x4a\x9f\x25\x7d\x82\x04\x5d\xa8\x4d\x44\x07\xeb\x6f\x84\x48\x3d\xb5\x0f\xe1\x92\x5e\x4d\x43\x1a\x22\x00\x4f\xda\x53\xdb\x5c\x6f\x1a\x9c\xb1\x19\x73\xfe\x87\x35\x57\xc1\x6c\x5e\x72\xfe\x48\x67\xd6\xa9\x6e\x39\x30\x23\xb1\x95\xe6\x46\x9b\x31\xaa\x41\x31\x5b\x26\x74\x2d\x5d\x4b\x07\x9b\x6e\x63\x0b\xdd\x3c\x63\x34\x9d\x6e\x42\xff\x65\x26\x65\x2b\x60\x47\x9b\x3c\x00\xf8\x41\x94\x74\xac\x9c\x14\x6c\x0c\x1e\x24\x3b\x7b\xe8\x91\xc3\x01\x33\x05\xcc\x66\x62\x86\xca\x39\x9c\x83\xbf\x82\xac\x3a\xdd\x80\x7c\x32\x0d\xdd\xb6\x2d\xf6\xc5\x4c\x8f\xcf\x09\x96\x1a\x95\x3e\xf8\x33\xfa\x52\x64\x87\x67\xbe\x70\x5d\x30\x46\x55\xb4\xa5\x85\xdd\x9f\x54\xe6\x28\xff\x19\xd9\xf2\x13\x00\x00\xff\xff\x11\x77\xae\x0b\xd8\x04\x00\x00")

func turkeyCowBytes() ([]byte, error) {
	return bindataRead(
		_turkeyCow,
		"turkey.cow",
	)
}

func turkeyCow() (*asset, error) {
	bytes, err := turkeyCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "turkey.cow", size: 1240, mode: os.FileMode(420), modTime: time.Unix(1486459607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _turtleCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x31\x76\x84\x30\x0c\x44\x7b\x4e\x31\x25\x14\x42\x27\xe0\x0c\xdb\xa4\xd4\x63\xca\x6c\x97\x22\x49\xb5\x5a\x9f\x3d\xcf\x60\xc0\x36\x26\x9b\x4c\x01\x3c\x21\x7d\x8f\x64\x01\xc0\xe3\x31\xbe\xdd\x3f\xbe\xdf\xef\x5f\x9f\xcf\x27\x5e\x8a\xa4\xac\x22\xd9\xe1\x7f\x04\x4a\x08\x45\x20\x04\x49\x90\x3f\x52\x28\xa1\x15\xd6\x83\xb3\x45\x66\x23\x75\xb6\x2c\x05\xb0\x56\x69\x7c\x58\x5e\xac\x0e\xdc\xdc\x71\xf3\x22\x07\x30\x96\xd2\xed\x7f\x5e\xee\x70\x92\xee\xa4\x17\xc5\xfb\x7b\x57\xe6\xa6\x04\x94\x19\x7a\x51\xfe\x02\xd1\x27\x93\x03\xb4\x72\x7b\x82\xec\x0d\x5d\xf8\xd0\xec\xf0\xd6\x08\x6b\x77\xc5\x34\x8f\x02\x9b\xcd\x7e\xe3\xd4\x06\xd7\x14\xed\x1a\xc1\xc5\x9f\x37\x7b\xc8\x7b\xa5\x70\x63\x6b\x5c\x87\x8a\x75\xd0\xdc\xd3\x4e\x4b\xdc\x48\x48\x2e\x18\x44\xe2\xf6\x20\x58\x3a\x97\x3c\x91\x80\xb0\x64\xbb\x4f\xd3\x34\xe9\xba\xa5\xcb\x77\xa9\xcd\xb4\x6b\x88\x3a\x63\xd0\xb3\x5f\x1a\x18\xb5\x39\x95\xd4\x6e\x72\x6e\x63\x83\x90\x83\xae\xaf\x3d\xcd\x6c\xe0\xd0\xfd\x04\x00\x00\xff\xff\x48\xa9\xb3\xa4\x08\x04\x00\x00")

func turtleCowBytes() ([]byte, error) {
	return bindataRead(
		_turtleCow,
		"turtle.cow",
	)
}

func turtleCow() (*asset, error) {
	bytes, err := turtleCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "turtle.cow", size: 1032, mode: os.FileMode(420), modTime: time.Unix(1486459607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tuxCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xca\x21\x0e\x80\x30\x14\x03\x50\xbf\x53\xd4\xb1\x89\xed\x7b\x12\x6e\x81\xfc\x49\x71\xcc\x4d\x00\x6a\xdb\xdd\x09\xfc\x30\x45\xdd\x6b\x0b\xa0\xd6\xb4\xe6\x72\xed\xf9\x3c\x7a\x77\xf8\x6d\x9e\xa4\x18\xd3\x87\x56\x58\xd0\x86\x66\xca\x90\x08\x00\x85\x1a\x7d\xb3\x07\xc2\x6b\x99\x94\x00\x28\x9b\xed\x4a\x32\x2c\x9e\xa4\x38\x77\x07\x00\x00\xff\xff\xd6\x40\x00\x59\x8c\x00\x00\x00")

func tuxCowBytes() ([]byte, error) {
	return bindataRead(
		_tuxCow,
		"tux.cow",
	)
}

func tuxCow() (*asset, error) {
	bytes, err := tuxCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tux.cow", size: 140, mode: os.FileMode(420), modTime: time.Unix(1486459607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _udderCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\xb1\x0a\xc3\x20\x14\x45\xf7\xf7\x15\x97\x50\x88\x16\xf4\x07\x82\x63\xff\x20\xd9\x04\x87\xf2\x88\x53\x2d\x4d\x32\x04\xf5\xdf\x4b\x07\xd3\x68\xe9\x1d\xe4\xe0\x3d\xf7\x5d\xc2\xea\xf9\xe5\x78\x67\x18\xdc\x7d\x78\x8a\x18\xf5\x6d\xe7\x25\x67\x39\xd0\xc1\xd0\x06\x1d\xbe\x72\x37\x10\x10\xa3\x1e\x7d\xd8\x66\xbf\x2e\x39\x13\x9a\x0f\x00\x10\xce\x49\xd4\xa1\x02\xc7\x6d\xfb\xc7\x10\x7d\x2f\x61\x55\xc9\xcf\x7a\x0c\x8f\x79\xe3\x7a\x6f\x2b\x09\x40\x3a\xa1\x6d\xbb\xa4\x94\x12\x80\x74\x29\xe1\xda\x76\x9f\x77\x9a\x0a\x9d\x3b\x63\x6a\xa2\x77\x00\x00\x00\xff\xff\x9e\x7e\x4c\x0f\x45\x01\x00\x00")

func udderCowBytes() ([]byte, error) {
	return bindataRead(
		_udderCow,
		"udder.cow",
	)
}

func udderCow() (*asset, error) {
	bytes, err := udderCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "udder.cow", size: 325, mode: os.FileMode(420), modTime: time.Unix(1486459607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaderKoalaCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x50\x50\xa8\xae\xd6\x0b\xc9\xc8\x2f\x4d\xcf\x28\x29\xae\xad\xe5\x52\x40\x17\x51\x80\x02\x3d\x2e\x08\xa5\xab\xab\xab\xa7\xa0\xa0\xaf\x0f\xe6\x46\xd6\xe4\x2b\xe4\xd7\x44\xea\xeb\x2b\x80\xb8\xfa\xf1\x1a\x99\xb6\x99\x9a\xde\x10\x5e\x9d\x86\x66\x9d\x16\x88\x50\x00\x73\x15\x34\xe2\x35\x75\x35\xe2\x35\x15\x14\x14\xb8\x20\x46\xb9\x24\x16\x95\x64\x40\xe4\x14\xc2\x12\x53\x52\x8b\x40\x0c\x08\x37\x3b\x3f\x31\x27\x11\x66\x33\x17\x20\x00\x00\xff\xff\xd8\xe6\x5f\x8e\xa5\x00\x00\x00")

func vaderKoalaCowBytes() ([]byte, error) {
	return bindataRead(
		_vaderKoalaCow,
		"vader-koala.cow",
	)
}

func vaderKoalaCow() (*asset, error) {
	bytes, err := vaderKoalaCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vader-koala.cow", size: 165, mode: os.FileMode(420), modTime: time.Unix(1486459607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaderCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x80\x82\xea\x6a\xbd\x90\x8c\xfc\xd2\xf4\x8c\x92\xe2\xda\x5a\x90\x80\x8e\x6e\x9c\xae\x1e\x97\x02\x2e\x79\xc5\xfc\xc8\x7c\x45\x84\x34\x9a\xbc\xbe\x9e\xbe\x6d\x8c\x5e\x4c\x3c\x18\x20\xa9\x02\x03\x65\x65\x18\x4b\x33\x46\x3f\x06\x5d\x56\xa1\xa6\x46\x17\x04\xca\x6b\x6a\xb0\x48\xc1\x68\x2e\x74\x39\xe7\xfc\xf2\x92\x0c\x85\xb0\xc4\x94\xd4\x22\x2e\x40\x00\x00\x00\xff\xff\x5b\x35\xfa\xd2\xd4\x00\x00\x00")

func vaderCowBytes() ([]byte, error) {
	return bindataRead(
		_vaderCow,
		"vader.cow",
	)
}

func vaderCow() (*asset, error) {
	bytes, err := vaderCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vader.cow", size: 212, mode: os.FileMode(420), modTime: time.Unix(1486459607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwCow = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x80\x82\xea\x6a\xbd\x90\x8c\xfc\xd2\xf4\x8c\x92\xe2\xda\x5a\x05\x05\x85\xb8\xf8\xf8\x38\x2e\x05\x1c\xb2\x1a\xd5\xd5\x7a\xae\x95\xa9\xc5\xb5\xb5\x9a\x31\xf1\x10\x80\x50\xab\xa0\xa0\xa0\x11\x1f\xaf\x19\x03\x65\x6b\xc6\xe8\xc7\xa0\x48\x82\x0d\xcb\xcf\x4b\x2f\x4d\xad\xad\x55\xa8\xa9\xd1\xd5\x0d\x0f\x0f\x57\xa8\x41\x55\xa2\xa0\xa0\x50\x53\x03\xa5\xb8\x00\x01\x00\x00\xff\xff\x86\xbd\x60\x10\xa3\x00\x00\x00")

func wwwCowBytes() ([]byte, error) {
	return bindataRead(
		_wwwCow,
		"www.cow",
	)
}

func wwwCow() (*asset, error) {
	bytes, err := wwwCowBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www.cow", size: 163, mode: os.FileMode(420), modTime: time.Unix(1486459607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"beavis.zen.cow": beavisZenCow,
	"blowfish.cow": blowfishCow,
	"bong.cow": bongCow,
	"bud-frogs.cow": budFrogsCow,
	"bunny.cow": bunnyCow,
	"cheese.cow": cheeseCow,
	"cower.cow": cowerCow,
	"daemon.cow": daemonCow,
	"default.cow": defaultCow,
	"dragon-and-cow.cow": dragonAndCowCow,
	"dragon.cow": dragonCow,
	"elephant-in-snake.cow": elephantInSnakeCow,
	"elephant.cow": elephantCow,
	"eyes.cow": eyesCow,
	"flaming-sheep.cow": flamingSheepCow,
	"ghostbusters.cow": ghostbustersCow,
	"head-in.cow": headInCow,
	"hellokitty.cow": hellokittyCow,
	"kiss.cow": kissCow,
	"kitty.cow": kittyCow,
	"koala.cow": koalaCow,
	"kosh.cow": koshCow,
	"luke-koala.cow": lukeKoalaCow,
	"meow.cow": meowCow,
	"milk.cow": milkCow,
	"moofasa.cow": moofasaCow,
	"moose.cow": mooseCow,
	"mutilated.cow": mutilatedCow,
	"ren.cow": renCow,
	"satanic.cow": satanicCow,
	"sheep.cow": sheepCow,
	"skeleton.cow": skeletonCow,
	"small.cow": smallCow,
	"sodomized.cow": sodomizedCow,
	"stegosaurus.cow": stegosaurusCow,
	"stimpy.cow": stimpyCow,
	"supermilker.cow": supermilkerCow,
	"surgery.cow": surgeryCow,
	"telebears.cow": telebearsCow,
	"three-eyes.cow": threeEyesCow,
	"turkey.cow": turkeyCow,
	"turtle.cow": turtleCow,
	"tux.cow": tuxCow,
	"udder.cow": udderCow,
	"vader-koala.cow": vaderKoalaCow,
	"vader.cow": vaderCow,
	"www.cow": wwwCow,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"beavis.zen.cow": &bintree{beavisZenCow, map[string]*bintree{}},
	"blowfish.cow": &bintree{blowfishCow, map[string]*bintree{}},
	"bong.cow": &bintree{bongCow, map[string]*bintree{}},
	"bud-frogs.cow": &bintree{budFrogsCow, map[string]*bintree{}},
	"bunny.cow": &bintree{bunnyCow, map[string]*bintree{}},
	"cheese.cow": &bintree{cheeseCow, map[string]*bintree{}},
	"cower.cow": &bintree{cowerCow, map[string]*bintree{}},
	"daemon.cow": &bintree{daemonCow, map[string]*bintree{}},
	"default.cow": &bintree{defaultCow, map[string]*bintree{}},
	"dragon-and-cow.cow": &bintree{dragonAndCowCow, map[string]*bintree{}},
	"dragon.cow": &bintree{dragonCow, map[string]*bintree{}},
	"elephant-in-snake.cow": &bintree{elephantInSnakeCow, map[string]*bintree{}},
	"elephant.cow": &bintree{elephantCow, map[string]*bintree{}},
	"eyes.cow": &bintree{eyesCow, map[string]*bintree{}},
	"flaming-sheep.cow": &bintree{flamingSheepCow, map[string]*bintree{}},
	"ghostbusters.cow": &bintree{ghostbustersCow, map[string]*bintree{}},
	"head-in.cow": &bintree{headInCow, map[string]*bintree{}},
	"hellokitty.cow": &bintree{hellokittyCow, map[string]*bintree{}},
	"kiss.cow": &bintree{kissCow, map[string]*bintree{}},
	"kitty.cow": &bintree{kittyCow, map[string]*bintree{}},
	"koala.cow": &bintree{koalaCow, map[string]*bintree{}},
	"kosh.cow": &bintree{koshCow, map[string]*bintree{}},
	"luke-koala.cow": &bintree{lukeKoalaCow, map[string]*bintree{}},
	"meow.cow": &bintree{meowCow, map[string]*bintree{}},
	"milk.cow": &bintree{milkCow, map[string]*bintree{}},
	"moofasa.cow": &bintree{moofasaCow, map[string]*bintree{}},
	"moose.cow": &bintree{mooseCow, map[string]*bintree{}},
	"mutilated.cow": &bintree{mutilatedCow, map[string]*bintree{}},
	"ren.cow": &bintree{renCow, map[string]*bintree{}},
	"satanic.cow": &bintree{satanicCow, map[string]*bintree{}},
	"sheep.cow": &bintree{sheepCow, map[string]*bintree{}},
	"skeleton.cow": &bintree{skeletonCow, map[string]*bintree{}},
	"small.cow": &bintree{smallCow, map[string]*bintree{}},
	"sodomized.cow": &bintree{sodomizedCow, map[string]*bintree{}},
	"stegosaurus.cow": &bintree{stegosaurusCow, map[string]*bintree{}},
	"stimpy.cow": &bintree{stimpyCow, map[string]*bintree{}},
	"supermilker.cow": &bintree{supermilkerCow, map[string]*bintree{}},
	"surgery.cow": &bintree{surgeryCow, map[string]*bintree{}},
	"telebears.cow": &bintree{telebearsCow, map[string]*bintree{}},
	"three-eyes.cow": &bintree{threeEyesCow, map[string]*bintree{}},
	"turkey.cow": &bintree{turkeyCow, map[string]*bintree{}},
	"turtle.cow": &bintree{turtleCow, map[string]*bintree{}},
	"tux.cow": &bintree{tuxCow, map[string]*bintree{}},
	"udder.cow": &bintree{udderCow, map[string]*bintree{}},
	"vader-koala.cow": &bintree{vaderKoalaCow, map[string]*bintree{}},
	"vader.cow": &bintree{vaderCow, map[string]*bintree{}},
	"www.cow": &bintree{wwwCow, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

